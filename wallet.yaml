openapi: 3.0.1
info:
  title: Wallet API
  description: This is an api about the functionnalities of the wallet budgetbuckers application 
  version: 1.0.0
paths:
  /user:
    get:
      security:
        - apiKey: []
      
      tags:
        - "Users"
      summary: Show all users
      
      responses:
         '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"

         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - "Users"
      security:
        - apiKey: []
      summary: Update user
      parameters:
        - name: "userID"
          in: path
          description: "ID of the user to be updated"
          required: true
          schema:
            type: string
      responses:
         '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - apiKey: []
      tags:
        - "Users"
      summary: Delete all users
      responses:
         '200':
            description: All users have been deleted
           
         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
          $ref: '#/components/responses/ServerError'
    post:
      security:
        - apiKey: []
      tags:
        - "Users"
      summary: Create a new user
      requestBody:
        $ref: "#/components/requestBodies/UserRequestBody"
        
      responses:
         '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
          $ref: '#/components/responses/ServerError'


  /user/{userID}:
    get:
      tags:
        - "Users"
      security:
        - apiKey: []
      summary: Show user(s) by ID
      parameters:
        - name: userID
          in: path
          required: true
          description : User's ID
          schema:
            type: string
      responses:
         '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
          $ref: '#/components/responses/ServerError'
    delete:
      security:
        - apiKey: []
      tags:
        - "Users"
      summary: Delete user by ID
      parameters:
        - name: userID
          in: path
          description: "ID of the user to be deleted"
          required: true
          schema:
            type: string
      responses:
         '200':
            description: User deleted successfully
         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
          $ref: '#/components/responses/ServerError'

  /account/{accountID}:
    get:
      tags:
        - "Accounts"
      summary: Get account details by ID
      parameters:
        - name: accountID
          required: true
          in: path
          description: ID of the account to retrieve
          schema:
            type: string
      responses:
         '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Account"
         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - "Accounts"
      summary: Update account details by ID
      parameters:
        - name: Update account details by ID
          in: path
          required: true
          description: ID of the account to update
          schema:
            type: string
      requestBody:
        $ref: "#/components/schemas/Account"
      responses:
         '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Account"
         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - "Accounts"
      summary: Delete account by ID
      parameters:
        - name: accountID
          in: path
          description: "ID of the account to be deleted"
          required: true
          schema: 
            type: string
      responses:
         '200':
            description: Account deleted successfully
         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
          $ref: '#/components/responses/ServerError'
  /account:
    post:
      tags:
        - "Accounts"
      summary: Create a new account
      requestBody:
         $ref: "#/components/requestBodies/AccountRequestBody"
        
      responses:
         '200':
            description: Account created successfully
            content:
              application/json:
                schema:
                          $ref: "#/components/schemas/Account"
         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
          $ref: '#/components/responses/ServerError'
  /currencies:
    get:
      tags:
        - "Currencies"
      summary: Get currency details
      parameters:
        - name: sortBy
          in: query
          description: Sort by a specific property
          schema:
            type: string
          example: "currencyCode"
        - name: sortOrder
          in: query
          description: "Sort order (asc or dsc)"
          schema:
            type: array
            enum:
              - asc
              - dsc
            example: dsc
      responses:
        '200':
            description: Successful response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: "#/components/schemas/Currencies"
        '404':
           $ref: '#/components/responses/BadRequest'
        '500':
           $ref: '#/components/responses/ServerError'
    post:
      tags:
        - "Currencies"
      summary: Create a new currency
      requestBody:
        $ref: "#/components/requestBodies/CurrenciesRequestBody"

      responses:
         '200':
            description: Currencies created successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Currencies"
         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
          $ref: '#/components/responses/ServerError'
  /currencies/{currencyCode}:
    put:
      tags:
        - "Currencies"
      summary: Update currency details by code
      parameters:
        - name: currencyCode
          in: path
          required: true
          description: "Code of the currency to update"
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/CurrenciesRequestBody"
      responses:
        '200':
            description: Currencies updated successfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Currencies"
        '404':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - "Currencies"
      summary: Delete currency by code
      parameters:
        - name: currencyCode
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
            description: Currency deleted successfully
        '404':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /transactions/{transactionID}:
    get:
      tags:
        - "Transactions"
      summary: Get transaction by ID
      parameters:
        - name: transactionID
          in: path
          required: true
          description: "ID of the transaction to retrieve"
          schema:
            type: string
      responses:
        '200':
           description: Successful response
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Transactions'
        '404':
           $ref: '#/components/responses/BadRequest'
        '500':
           $ref: '#/components/responses/ServerError'
    put:
      tags:
        - "Transactions"
      summary: Update transactions details by ID
      parameters:
        - name: transactionID
          in: path
          required: true
          description: "ID of the transaction to update"
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/TransactionsRequestBody"
      responses:
        '200':
           description: Transaction updated successfully
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Transactions'
        '404':
           $ref: '#/components/responses/BadRequest'
        '500':
           $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - "Transactions"
      summary: Delete transaction by ID
      parameters:
        - name: transactionID
          in: path
          description: "ID of the transaction to be deleted"
          required: true
          schema:
            type: string
      responses:
        '200':
           description: Transaction deleted successfully
        '404':
           $ref: '#/components/responses/BadRequest'
        '500':
           $ref: '#/components/responses/ServerError'
  /transactions:
    get:
      tags:
        - "Transactions"
      security:
        - apiKey: []
      summary: Get transaction details
      parameters:
        - name: sortBy
          in: query
          description: "Sort by a specific property (e.g., transactionTime, transactionAmount)"
          schema:
            type: string
          example: "transactionTime"
        - name: sortOrder
          in: query
          description: "Sort order (asc or desc)"
          schema:
            type: string
            enum: ["asc", "desc"]
          example: "asc"
      responses:
         '200':
           description: Successful response
           content:
             application/json:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/Transactions'
         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
           $ref: '#/components/responses/ServerError'
    post:
      tags:
        - "Transactions"
      summary: Create a new transaction
      requestBody:
        $ref: "#/components/requestBodies/TransactionsRequestBody"
      responses:
         '200':
           description: Account created successfully
           content:
             application/json:
               schema:
                 type: array
                 items:
                   $ref: '#/components/schemas/Transactions'
         '404':
           $ref: '#/components/responses/BadRequest'
         '500':
           $ref: '#/components/responses/ServerError'
      



components:
  responses:
    Success:
      description: Successful request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          example:
            error: "Bad Request"
    ServerError:
      description: Internal Server Error
      content:
        application/json:
          example:
            error: "Internal Server Error"
  requestBodies:
    AccountRequestBody:
       content:
        application/json:
          schema:
            $ref: "#/components/schemas/Account"
    UserRequestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              password: 
                type: string
            $ref: "#/components/schemas/User"
    CurrenciesRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Currencies"
    TransactionsRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Transactions"
  securitySchemes:
    apiKey: 
      type: apiKey
      in: header
      name: Authorization
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Identifier for the user
        username:
          type: string
          minLength: 2
        password:
          type: string
        account:
          $ref: "#/components/schemas/Account"
        currencies:
         $ref: "#/components/schemas/Currencies"
      required:
        - "username"
        - "password"
    Account:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        accountID:
          type: string
        accountBalance:
          type: integer
        accountCurrency:
           $ref: "#/components/schemas/Currencies"
        accountType: 
          type: string
        accountStatus:
          type: string
        transactionHistory:
          $ref: "#/components/schemas/Transactions"
        creationDate:
          type: string
          format: date
        sortBy:
          type: string
          enum: [balance, type, status, creationDate]
        sortOrder:
          type: string
          enum: [asc, desc]
    Currencies:
      type: object
      properties:
        currencyCode:
          type: integer
        currencyName:
          type: string
        currencySymbol:
          type: string
        currencyUnit:
          type: string
        lastUpdated:
          type: string
          format: date
        exchangeRate:
          type: string
        account:
          $ref: "#/components/schemas/Account"
    Transactions:
      type: object
      properties:
        transactionID:
          type: string
        sourceAccount:
          $ref: "#/components/schemas/User"
        destinationAccount:
          $ref: "#/components/schemas/User"
        transactionCurrency:
          $ref: "#/components/schemas/Currencies"
        transactionAmount:
          type: string
        transactionDate:
          type: string
          format: timestamp
        transactionStatus:
          type: string
        transactionType:
          type: string
        category:
          type: string
        notifications:
          type: array
          items:
            type: object
            properties:
              method:
                type: string
                enum:
                  - email
                    sms
                    pushNotification
              recipient:
                type: string
                description: "Email address, phone number, or user ID for the recipient"
        template: 
          type: string
          description: "ID or name of the template associated with the transaction"
        sortBy:
          type: string
          description: "Property by which to sort the transactions"
        sortOrder:
          type: string
          description: "Sort order (asc or desc)"



